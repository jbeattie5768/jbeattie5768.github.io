[{"content":" PyREPL in VSCode is Possible\nThe PyREPL I use the REPL all the time and I\u0026rsquo;m enjoying the new PyREPL.\nIf you haven\u0026rsquo;t yet moved to Python 3.14, you should - PyREPL is another compelling reason to update.\nThe new PyREPL has been available since Python 3.13, and replaces the original C-based REPL with a Python-based implementation (PyREPL). You can read about the PyREPL in \u0026lsquo;PEP 762 – REPL-acing the default REPL\u0026rsquo;.\nKey benefits of the new PyREPL:\nColoured output for improved readability New built-in commands (exit, quit, copyright, help, clear) Improved paste handling for multi-line code Block-level history and a persistent history file (.python_history) Better Windows/PowerShell support Inline help and history convenience keys (F1/F2 mappings may vary by terminal) Using the PyREPL in VSCode I\u0026rsquo;ve had trouble with the terminal in VSCode in the past (see this blog post), and by default VSCode currently disables the PyREPL (VSCode-Python Issue #25240) - this is the case in the September 2025 (version 1.105.1) release:\nVSCode showing the default (C-based) Python REPL — no PyREPL features such as coloured output or easy exit.\nNot ideal.\nThis also seems to be the case for the VSCode Insiders version (I observed it in the 1.106.0-insider version).\nI\u0026rsquo;d expect this to be a temporary thing for VSCode, and they are working on changing it.\nVSCode sets the PYTHON_BASIC_REPL environment variable within its environment, which forces the basic REPL and prevents PyREPL from loading.\nYou can change this default behaviour in your VSCode user settings (settings.json) by adding:\n{ // Disable Python extension shell integration so the system can load PyREPL \u0026#34;python.terminal.shellIntegration.enabled\u0026#34;: false } You\u0026rsquo;ll need to kill the terminal for it to take effect:\nPyREPL in VSCode: coloured output, and easy exit.\nA thing of beauty!\nIf you still see the old REPL after changing the user settings, restart VSCode.\nThere have been reports of cursor indentation issues (see CPython Issue #126131) when using PyREPL in VSCode, but I\u0026rsquo;ve not noticed any major issues yet.\nReferences https://github.com/pypy/pypy/tree/d102094b863ce49b7af030dcb0cecaac515d97c6/lib_pypy/pyrepl https://peps.python.org/pep-0762 https://github.com/microsoft/vscode-python/issues/25164 https://github.com/microsoft/vscode-python/issues/25240 https://github.com/microsoft/vscode-python/pull/25216 https://github.com/microsoft/vscode-python/pull/25281 https://github.com/python/cpython/issues/126172 https://github.com/python/cpython/issues/126131 https://code.visualstudio.com/docs/terminal/shell-integration Edits to this Post 30 Oct 2025: Added banner image to post. ","permalink":"https://jbeattie5768.github.io/posts/2025-10-27-issues-using-the-new-python-repl-in-vscode/","summary":"\u003cfigure\u003e\n    \u003cimg loading=\"lazy\" src=\"VSCode_PyREPL_Example.webp\"\n         alt=\"PyREPL example in VSCode showing various coloured examples\"/\u003e \u003cfigcaption\u003e\n            \u003cp\u003ePyREPL in VSCode is Possible\u003c/p\u003e\n        \u003c/figcaption\u003e\n\u003c/figure\u003e\n\n\u003ch2 id=\"the-pyrepl\"\u003eThe PyREPL\u003c/h2\u003e\n\u003cp\u003eI use the REPL all the time and I\u0026rsquo;m enjoying the new PyREPL.\u003cbr\u003e\nIf you haven\u0026rsquo;t yet moved to Python 3.14, you should - PyREPL is another compelling reason to update.\u003c/p\u003e\n\u003cp\u003eThe new PyREPL has been available since Python 3.13, and replaces the original C-based REPL with a Python-based implementation (PyREPL). You can read about the PyREPL in \u003ca href=\"https://peps.python.org/pep-0762/\"\u003e\u0026lsquo;PEP 762 – REPL-acing the default REPL\u0026rsquo;\u003c/a\u003e.\u003c/p\u003e","title":"Using the New PyREPL in VSCode"},{"content":"\nIntroduction YT‑DLP is a fast, actively maintained command-line tool for downloading audio and video from many sites. I use it to extract audio from videos for offline listening on walks. This post shows a simple, reproducible workflow using UV/UVX so you can run YT‑DLP without installing it system‑wide, plus a small PowerShell helper script to make converting downloads easier.\nWhat you’ll find here:\nPrerequisites and quick troubleshooting tips How I run YT‑DLP via UVX A ready-to-use PowerShell script Legal/Terms reminder: only download content you have the right to store or that is permitted by the content provider\u0026rsquo;s terms of service.\nPrerequisites UV installed and configured (uvx is an alias for uv tool run) Windows with PowerShell 7+ (for the scripts, the UVX commands will work outside of PowerShell) FFmpeg binaries available locally (required for audio extraction) Troubleshooting uvx not found: ensure UV is installed and uv is on the PATH. uv tool run is equivalent to uvx. FFmpeg missing: YT‑DLP will fail to extract audio without FFmpeg. Verify the path passed to --ffmpeg-location points to the directory containing ffmpeg.exe. Permission errors writing files: run PowerShell as a user that can write to the target folder or change the RootFolder to a writeable location. Network/download failures: try again with --verbose to see error details; some sites require cookies or authentication. File name collisions: the script writes to the chosen filename; check for existing files. Reproducibility vs latest: using --no-cache with uvx fetches the latest tool each run (useful for yt-dlp\u0026rsquo;s rapid updates). Remove it for more reproducible runs. UVX Commands These are what I use to extract the audio from videos. You will be able to modify for your needs:\n# PowerShell # Setup some Aliases for this Example $UrlLink = \u0026#34;https://www.youtube.com/watch?v=dQw4w9WgXcQ\u0026#34; $OutFilename = \u0026#34;RickRoll.mp3\u0026#34; $AudioFormat = \u0026#34;mp3\u0026#34; $TempFolder = \u0026#34;c:\\temp\\yt-dlp\u0026#34; # My temp store before I copy to Phone/MP3 player $FFmpegPath = join-path -path $TempFolder -childpath \u0026#34;ffmpeg-master-latest-win64-gpl\\bin\u0026#34; # Required binaries for audio extraction cd $TempFolder # Go to my temp store # Run YT-DLP via UVX uvx --no-cache yt-dlp -x --audio-format $AudioFormat --ffmpeg-location $FFmpegPath -o $OutFilename $UrlLink --verbose # Command breakdown uvx --no-cache yt-dlp # Get the latest yt-dlp every time -x # Convert video files to audio-only files # (Use -k to keep the intermediate video) --audio-format $AudioFormat # Use the specified audio format --ffmpeg-location $FFmpegPath # Location of FFMPEG binary: exe path or just dir -o $OutFilename # Output filename $UrlLink # URL to video to extract audio from --verbose # Optional: print debugging information The audio extraction requires the FFMPEG binaries which can be downloaded from here. Simply extract to somewhere convenient.\nMaking It Simple For Me As a PowerShell script, e.g., download_yt_audio.ps1:\n#Powershell Script: .\\download_yt_audio.ps1 # Defaults, change as required $DefaultRootFolder = \u0026#34;C:\\temp\\yt-dlp\u0026#34; $DefaultAudioFormat = \u0026#34;mp3\u0026#34; # aac, alac, flac, m4a, mp3, opus, vorbis, wav $DefaultFFmpegPath = \u0026#34;C:\\temp\\yt-dlp\\ffmpeg-master-latest-win64-gpl\\bin\u0026#34; $DefaultAutoPlay = $false $Verbosity = \u0026#34;--quiet\u0026#34; # Change to \u0026#34;--verbose\u0026#34; for more output # Check UVX is available on the path if (-not (Test-Path (get-command uvx.exe).Path)) { Write-Host \u0026#34;No uvx.exe found. Check it is available on your path.\u0026#34; exit 1 } # Get user inputs or use defaults $UrlLink = Read-Host \u0026#34;URL/Link of Video\u0026#34; if (-not $UrlLink) { Write-Error \u0026#34;You must provide a URL.\u0026#34;; exit 1 } [ValidateSet(\u0026#39;aac\u0026#39;, \u0026#39;alac\u0026#39;, \u0026#39;flac\u0026#39;, \u0026#39;m4a\u0026#39;, \u0026#39;mp3\u0026#39;, \u0026#39;opus\u0026#39;, \u0026#39;vorbis\u0026#39;, \u0026#39;wav\u0026#39;, \u0026#39;\u0026#39;)]$AudioFormat = Read-Host \u0026#39;Audio Format (default:\u0026#39; $DefaultAudioFormat\u0026#39;)\u0026#39; # It\u0026#39;s a coarse error if it fails, but it\u0026#39;s at least a check if (-not $AudioFormat) { $AudioFormat = $DefaultAudioFormat } # \u0026#39;\u0026#39; option $Filename = Read-Host \u0026#34;Output Filename (no extension)\u0026#34; if (-not $Filename) { Write-Error \u0026#34;You must provide an output filename.\u0026#34;; exit 1 } $FFmpegPath = Read-Host \u0026#39;FFMPEG Folder (default:\u0026#39; $DefaultFFmpegPath \u0026#39;)\u0026#39; if (-not $FFmpegPath) { $FFmpegPath = $DefaultFFmpegPath } # Validate ffmpeg path $FFmpegExePath = Join-Path -Path $FFmpegPath -ChildPath \u0026#34;ffmpeg.exe\u0026#34; if (-not (Test-Path -Path $FFmpegExePath)) { Write-Warning \u0026#34;FFmpeg executable not found at: $FFmpegExePath\u0026#34; exit 1 # Alternatively ask user to get the path correct } $RootFolder = Read-Host \u0026#39;Root Folder (default:\u0026#39; $DefaultRootFolder \u0026#39;)\u0026#39; if (-not $RootFolder) { $RootFolder = $DefaultRootFolder } # Ensure root folder exists if (-not (Test-Path -Path $RootFolder)) { Write-Host \u0026#34;Creating $RootFolder\u0026#34; New-Item -Path $RootFolder -ItemType Directory -Force | Out-Null } $AutoPlay = Read-Host \u0026#39;AutoPlay Audio after Extraction? (default off)\u0026#39; if (-not($AutoPlay)) { $AutoPlay = $DefaultAutoPlay} $OutFilename = \u0026#34;$Filename.$AudioFormat\u0026#34; # Append format as extension Set-Location -Path $RootFolder # Go to root folder # UVX args: use --no-cache to fetch latest yt-dlp version each time $uvxArgs = @(\u0026#34;--no-cache\u0026#34;, \u0026#34;yt-dlp\u0026#34;, \u0026#34;-x\u0026#34;, \u0026#34;--audio-format\u0026#34;, $AudioFormat, \u0026#34;--ffmpeg-location\u0026#34;, $FFmpegPath, \u0026#34;-o\u0026#34;, $OutFilename, $UrlLink, $Verbosity ) Write-Host \u0026#34;Running: uvx $($uvxArgs -join \u0026#39; \u0026#39;)\u0026#34; \u0026amp; uvx @uvxArgs # Let UV handle errors # Optionally play the downloaded audio if ($AutoPlay) { $OutfilePath = Join-Path -Path $RootFolder -ChildPath $OutFilename if (Test-Path $OutfilePath) { Start-Process -FilePath $OutfilePath } else { Write-Warning \u0026#34;Downloaded file not found: $OutfilePath\u0026#34; } } # End of Script Edits to this Post 30 Oct 2025: Added banner image to post and reordered \u0026ldquo;What you’ll find here\u0026rdquo; items. ","permalink":"https://jbeattie5768.github.io/posts/2025-10-12-using-yt-dlp-with-uvx/","summary":"\u003cp\u003e\u003cimg alt=\"alt text\" loading=\"lazy\" src=\"/posts/2025-10-12-using-yt-dlp-with-uvx/yt_dlp_to_mp3_02.webp\"\u003e\u003c/p\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eYT‑DLP is a fast, actively maintained command-line tool for downloading audio and video from many sites. I use it to extract audio from videos for offline listening on walks. This post shows a simple, reproducible workflow using UV/UVX so you can run YT‑DLP without installing it system‑wide, plus a small PowerShell helper script to make converting downloads easier.\u003c/p\u003e\n\u003cp\u003eWhat you’ll find here:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003ePrerequisites and quick troubleshooting tips\u003c/li\u003e\n\u003cli\u003eHow I run YT‑DLP via UVX\u003c/li\u003e\n\u003cli\u003eA ready-to-use PowerShell script\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eLegal/Terms reminder\u003c/strong\u003e: only download content you have the right to store or that is permitted by the content provider\u0026rsquo;s terms of service.\u003c/p\u003e","title":"Using YT-DLP With UVX"},{"content":"If your Windows PATH environment variable in your VSCode terminal does not match the one in your terminal outside of VSCode, it\u0026rsquo;s probably this setting in VSCode:\nterminal.integrated.enablePersistentSessions\nUncheck this or set it to be false, and restart VScode and all should be right.\nBy default, this option persists your terminal sessions across reloads (VSCode Terminal Advanced Docs).\nThat might be handy, so re-enabling it afterwards would be okay if you really wanted it, but for me I\u0026rsquo;ve disabled it in my user settings:\n\u0026#34;terminal.integrated.enablePersistentSessions\u0026#34;: false, I also changed \u0026ldquo;Terminal: Integrated Persistent Session Revive Process\u0026rdquo; to \u0026ldquo;never\u0026rdquo;:\n\u0026#34;terminal.integrated.persistentSessionReviveProcess\u0026#34;: \u0026#34;never\u0026#34;, I noticed this issue when I was installing Ruff.\nI\u0026rsquo;d installed Ruff using UV, and set the path in a terminal outside of VSCode.\nUsing the handy utility JustPath, I can see the PATH has been updated:\nWhen I went to VSCode to try out Ruff, I instead got this:\nThe PATH is different and it turned out the Terminal enablePersistentSessions default setting was the reason.\n","permalink":"https://jbeattie5768.github.io/posts/2025-08-29-vscode-terminal-does-not-match-the-windows-path-environment/","summary":"\u003cp\u003eIf your Windows \u003cem\u003ePATH\u003c/em\u003e environment variable in your VSCode terminal does not match the one in your terminal outside of VSCode, it\u0026rsquo;s probably this setting in VSCode:\u003c/p\u003e\n\u003cp\u003e\u003cimg alt=\"Setting\" loading=\"lazy\" src=\"/posts/2025-08-29-vscode-terminal-does-not-match-the-windows-path-environment/images/2025-07-18-path-04.jpg\"\u003e\u003c/p\u003e\n\u003cp\u003e\u003cem\u003e\u003cstrong\u003eterminal.integrated.enablePersistentSessions\u003c/strong\u003e\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eUncheck this or set it to be \u003cem\u003efalse\u003c/em\u003e, and restart VScode and all should be right.\u003c/p\u003e\n\u003cp\u003eBy default, this option persists your terminal sessions across reloads (\u003ca href=\"https://code.visualstudio.com/docs/terminal/advanced\"\u003eVSCode \u003cstrong\u003eTerminal\u003c/strong\u003e Advanced Docs\u003c/a\u003e).\u003cbr\u003e\nThat might be handy, so re-enabling it afterwards would be okay if you really wanted it, but for me I\u0026rsquo;ve disabled it in my user settings:\u003c/p\u003e","title":"VSCode Terminal Does Not Match the Windows System PATH"},{"content":" Table of Contents Table of Contents 1. Introduction 2. Background: What is the Windows Registry? Structure of the Windows Registry 3. The Problem with Sample Code: Lessons from PEP 514 4. Exploring the Registry: Exporting and Analysing Data Example: Analysing Exported Registry Files Example summary of my registry key statistics 5. Building a Better Registry Reader in Python Getting Keys and Values Traversing Subkeys via Recursion Printing Results Arguments with ArgParse Issues Found Final Tidy 6. Practical Example: Using the Script Command-line Examples Script Examples Example 1 Example 2 7. Key Takeaways Reading a Registry Value Writing to the Registry Deleting a Registry Key or Value 8. Try It Yourself 1. Introduction Curiosity often leads to some of the most interesting projects. After reading about PEP 514 in the Astral UV documentation, I discovered that Python installations on Windows are registered in the Windows Registry. Intrigued, I tried the sample code from PEP 514, only to find it lacking. This post documents my journey to build a more robust, flexible Python script for reading Windows Registry values. Hopefully this may be useful for someone.\n2. Background: What is the Windows Registry? The Windows Registry is a hierarchical database that stores configuration settings and options for the operating system and installed applications in the form of Name:Value pairs. For Python developers, it’s especially relevant because Python installations are registered here (as per PEP 514), making it possible to discover and manage multiple Python versions programmatically.\nStructure of the Windows Registry The Windows Registry is similar to a file-system. The top-level nodes (hives) are known as root-keys, and each top-level root-key contains subkeys (like folders) and values (like files).\ngraph TD A[HKEY_CLASSES_ROOT] B[HKEY_CURRENT_USER] C[HKEY_LOCAL_MACHINE] D[HKEY_USERS] E[HKEY_CURRENT_CONFIG] F[Subkeys \u0026amp; Values] A --\u0026gt; F B --\u0026gt; F C --\u0026gt; F D --\u0026gt; F E --\u0026gt; F Root Key Purpose HKEY_CLASSES_ROOT Stores information about registered applications, file associations, and COM objects. HKEY_CURRENT_USER Contains settings and preferences for the currently logged-in user. HKEY_LOCAL_MACHINE Holds configuration data for the local computer, including hardware and software. HKEY_USERS Contains user-specific configuration for all users on the system. HKEY_CURRENT_CONFIG Stores information about the current hardware profile used at system startup. A path is made from a root-key, keys, subkeys, and values. For example:\nHive (root key): HKEY_CURRENT_USER └── Key: Software └── Subkey: Python └── Subkey: Astral └── Subkey: CPython3.13.5 └── Value: InstallPath A key (or subkey) is like a folder—it can contain more subkeys and also values. CPython3.13.5 is a subkey. It can contain more subkeys (like InstallPath) and/or values (like Default, ExecutablePath, etc.). A value is a Name:Value pair stored inside a key. It does not contain further subkeys or values. InstallPath can be either a subkey (if it contains more subkeys/values) or a value (if it is just a Name:Value pair). The term \u0026ldquo;hive\u0026rdquo; is often used in documentation for the Windows Registry and seems to be a term specific to Windows, used by Microsoft to describe the files and top-level sections of the registry.\n3. The Problem with Sample Code: Lessons from PEP 514 When I first tried the two blocks of sample code from PEP 514, I expected it to work out of the box. Instead, it returned incomplete or misleading results:\nFrom looking at the Windows RegEdit application I knew this code was not reporting the correct values.\nReading the Python WinReg module documentation, we can get the code samples working by replacing the winreg.QueryValue() function call with the recommended winreg.QueryValueEx() function call and unpacking the returned value. This now gives:\nThat simple change, and removing the access mask to open the key (sample #1 only), has gotten us further. The fields are now looking better for those handled.\nThe Modified PEP 514 Sample Code is on my GitHub.\nI can see there is still more information we can access for the Python entries not handled by the sample code though.\n4. Exploring the Registry: Exporting and Analysing Data To better understand the registry’s structure, I exported sections of it using the Windows regedit.exe application and analysed the resulting files in the REPL. This helped me see the variety of data types and key/value patterns present.\nThe regedit.exe application does not allow you to export (dump) the whole registry as a single text file. You have to export the registry piecemeal, which in itself is a bit of a warning sign that there is a lot of data.\nFor my system, there can be a large number of keys to traverse depending on the root HKEY chosen:\nFilename File Size Line Count Key Count regdump_HKEY_CURRENT_CONFIG.txt 3.65 (KB) 58 12 regdump_HKEY_CURRENT_USER.txt 73.45 (MB) 611842 18402 regdump_HKEY_USERS.txt 100.40 (MB) 898276 35469 regdump_HKEY_CLASSES_ROOT.txt 122.69 (MB) 1931975 201571 regdump_HKEY_LOCAL_MACHINE.txt 553.31 (MB) 7558804 529983 Totals 849.85 (MB) 11,000,955 785,437 I\u0026rsquo;m not looking for much, just some idea of what we have. The following code is an example of what was run in the REPL as I was exploring the data, but it is runnable as a script on my GitHub. Python is quite capable of handling all these files simultaneously:\nExample: Analysing Exported Registry Files # file_analyse.py import fileinput from pprint import pprint tuple_of_files = ( \u0026#34;regdump_HKEY_CLASSES_ROOT.txt\u0026#34;, \u0026#34;regdump_HKEY_CURRENT_CONFIG.txt\u0026#34;, \u0026#34;regdump_HKEY_CURRENT_USER.txt\u0026#34;, \u0026#34;regdump_HKEY_LOCAL_MACHINE.txt\u0026#34;, \u0026#34;regdump_HKEY_USERS.txt\u0026#34;, ) # There are some \u0026#39;locale\u0026#39; characters that will not work for UTF-8 with fileinput.input(files=tuple_of_files, encoding=\u0026#34;utf-16\u0026#34;) as fid: data = list(fid) # What Can we find out about Keys keynames = [] for this_line in data: if this_line.startswith(\u0026#34;Key Name:\u0026#34;): # Caution: Keys can have whitespace keynames.append(this_line.split(\u0026#34;Key Name:\u0026#34;)[1].strip()) print(f\u0026#34;Key Count: {len(keynames)}\\n\u0026#34;) pprint(keynames[:12]) # Print 1st 12 # Likely the longest and deepest key-paths are the same... longest_path = max(keynames, key=len) print(f\u0026#34;\\nLongest key-path is {len(longest_path)} characters.\u0026#34;) print(f\u0026#34;With {len(longest_path.split(\u0026#39;\\\\\u0026#39;))} keys in it:\\n\u0026#34;) print(longest_path) # The actual key-path deepest_path = max(keynames, key=lambda x: len(x.split(\u0026#34;\\\\\u0026#34;))) print(f\u0026#34;\\nDeepest key-path is {len(deepest_path)} characters.\u0026#34;) print(f\u0026#34;With {len(deepest_path.split(\u0026#39;\\\\\u0026#39;))} keys in it:\\n\u0026#34;) print(deepest_path) # The actual key-path # So as we thought, Key Names are like paths # i.e., the path is made up of keys and subkeys ... # other code available on GitHub Example summary of my registry key statistics Line Count: 11000955 Lines Blank: 2017686 ...which accounts for 18.34% of all lines ...removed blank lines, which has reduced line count by 18.34% Updated Line Count: 8983269 Key Count: 785437 Longest key-path is 407 characters. With 28 keys in it Deepest key-path is 407 characters. Duplicate Keys = False HKEYS listed: {\u0026#39;HKEY_CLASSES_ROOT\u0026#39;, \u0026#39;HKEY_CURRENT_CONFIG\u0026#39; \u0026#39;HKEY_CURRENT_USER\u0026#39;, \u0026#39;HKEY_LOCAL_MACHINE\u0026#39;, \u0026#39;HKEY_USERS\u0026#39;} Types found: {\u0026#39;REG_BINARY\u0026#39;, \u0026#39;REG_DWORD\u0026#39;, \u0026#39;REG_EXPAND_SZ\u0026#39;, \u0026#39;REG_FULL_RESOURCE_DESCRIPTOR\u0026#39;, \u0026#39;REG_MULTI_SZ\u0026#39;, \u0026#39;REG_NONE\u0026#39;, \u0026#39;REG_QWORD\u0026#39;, \u0026#39;REG_RESOURCE_LIST\u0026#39;, \u0026#39;REG_RESOURCE_REQUIREMENTS_LIST\u0026#39;, \u0026#39;REG_SZ\u0026#39;, \u0026#39;REG_UNKNOWN\u0026#39;} The most common Class Name entries (Name, Count): [(\u0026#39;\u0026lt;NO CLASS\u0026gt;\\n\u0026#39;, 783641), (\u0026#39;REG_SZ\\n\u0026#39;, 1090), (\u0026#39;Shell\\n\u0026#39;, 694), (\u0026#39;Network ComputerName\\n\u0026#39;, 2), (\u0026#39;1aa506ff\\n\u0026#39;, 2), (\u0026#39;adda2636\\n\u0026#39;, 2), (\u0026#39;5c15e5ed\\n\u0026#39;, 2), (\u0026#39;2c356ba6\\n\u0026#39;, 2), (\u0026#39;DynDRootClass\\n\u0026#39;, 2)] There are a lot of keys (\u0026gt;780k) and the longest key-path is long (28 keys or 407 characters). There is one value Type not defined in the Python WinReg module, which is REG_UNKNOWN. This appears when the Type is just an undefined hex value. We can either print the hex value or follow suit and use REG_UNKNOWN.\nClass Name entries appear in the exported text files, but not in the RegEdit application itself. I think this is the RegEdit exporter being clever by cross-referencing the Class, ClassID and ClassGuid \u0026lsquo;Name\u0026rsquo; entries defined elsewhere in the registry.\nUpdate: I\u0026rsquo;ve subsequently confirmed that I cannot access anything named \u0026lsquo;Class Name\u0026rsquo; in the registry with the Python WinReg module, and therefore ignoring these is a safe thing to do.\nI\u0026rsquo;m only dealing with 64-bit Windows, so I\u0026rsquo;m not worrying about accessing 32-bit applications. You may need to investigate further if you have to worry about 32-bit access – see Accessing an Alternate Registry View for more information.\nThe simplest Python WinReg code I could write to read a value:\nimport winreg key_handle = winreg.OpenKeyEx( winreg.HKEY_CURRENT_USER, # Root key \u0026#34;Software\\\\Python\\\\PythonCore\u0026#34;, # Subkey access=winreg.KEY_READ, # Default is KEY_READ ) # Read known named value for the given subkey # Ignore value_type, we do nothing with it value, value_type = winreg.QueryValueEx(key_handle, \u0026#34;DisplayName\u0026#34;,) print(f\u0026#34;SubKey value: DisplayName=\u0026#39;{value}\u0026#39;\u0026#34;) # \u0026#34;key_handle\u0026#34; object closed automatically when the object is destroyed # Alternatively use \u0026#34;winreg.CloseKey()\u0026#34;, or better still a Context Manager There is a winreg.QueryInfoKey() function that returns the number of sub-keys and number of values for the passed key-path. You could then read each value (in a for-loop) with the winreg.QueryValueEx() function.\nAlternatively there is the preferred winreg.EnumKey() and winreg.EnumValue() functions that retrieve the name/value of one subkey each time they are called. These are typically called repeatedly until an OSError exception is raised, indicating no more values are available.\nThe latter is preferable for traversing a key-path.\n5. Building a Better Registry Reader in Python I set out to write a script that can:\nRead any registry key or value, not just Python-related ones Traverse subkeys recursively Handle errors gracefully..somewhat Be easily extended for new use cases We will define some design caveats first:\nWe will only be connecting locally, otherwise see winreg.ConnectRegistry(). Read Only, I don\u0026rsquo;t want to write to the Registry (Danger!) 64-bit only Print results to the console only, can redirect to file on the console if needed Use the REG_UNKNOWN type for undefined type values Command Line (CLI) use, but also programmatically callable One root-key at a time on CLI – can programmatically call more if needed Allow specific subkeys to be ignored - helps overcome permission issues and errors in the registry All the source code is available in the GitHub Repository: winreg_read.\nGetting Keys and Values I like the sample code method of using yield. Not keen on having the counter, so we can use recursion instead:\n# DO NOT DO THIS def get_keys(hkey, path, index=0): try: yield winreg.EnumKey(winreg.OpenKey(hkey, path), index) yield from get_keys(hkey, path, index+1) except OSError as err: pass Okay, bad idea #1 complete! Turns out this causes a RecursionError.\nWhat I did not realise was that Python has a recursion limit (sys.getrecursionlimit()), and using recursion in the Keys and Values functions meant we exceeded that limit (RecursionError exception), even for moderately-short traversals. You can change the recursion limit (sys.setrecursionlimit(n)), but I was not keen on doing so. So I went back to the counter method.\nThis was also the time I became concerned about key handles leaking for deep traversals.\nThe code is perhaps less Pedantic Pythonic, but it\u0026rsquo;s probably clearer to understand with the counter method anyway!\n# USE THIS for get_keys() and get_values() def get_keys(hkey, path): \u0026#34;\u0026#34;\u0026#34;Yield all subkey names under the given HKey and sub-key path.\u0026#34;\u0026#34;\u0026#34; try: # Explicitly close handles, otherwise risk of leaks for large traversals with winreg.OpenKey(hkey, path) as key: index = 0 while True: try: yield winreg.EnumKey(key, index) index += 1 except OSError: # Expected when no more keys to yield break except FileNotFoundError as err: msg = f\u0026#34;\\n{path} is not a valid path\u0026#34; raise FileNotFoundError(msg) from err except PermissionError as err: print(f\u0026#34;{err}: Permission Error: you may need to run the script as Admin.\u0026#34;) We\u0026rsquo;ve added some exception protection for invalid paths, and some of the Registry may not be accessible to the user.\nTraversing Subkeys via Recursion We want:\nflowchart TD A[1: Function Entry - Traverse Key-Path] --\u0026gt; B[2: Get Values for Key-Path] B --\u0026gt; C{3: For each Subkey in get_keys} C -- No more Subkeys --\u0026gt; CC[4: Continue] C-- For each Subkey --\u0026gt;D[5: Build Subkey-Path] D--\u0026gt; E[6: Get Values for Subkey-Path] E --\u0026gt; F{7: For each Sub-Subkey-Path in get_keys} F -- No more Sub-Subkeys --\u0026gt; FF[8: Continue] F -- For each Sub-Subkey --\u0026gt; G[9: Build Sub-Subkey-Path] G --\u0026gt; H[10: Recursive call: Traverse Sub-Subkey-Path] H --\u0026gt; A Printing Results I only care about printing to the console. The RegEdit application\u0026rsquo;s exported text files are close to what I want, but perhaps with just some tweaking:\nFull_Path\\Copyable_for_RegEdit TYPE NAME VALUE Full_Path\\Copyable_for_RegEdit\\Plus_Subkey TYPE NAME VALUE ...and so on... We\u0026rsquo;ve seen some of the paths can be huge (\u0026gt;400 characters for my system), the empty line between paths will help identify blocks of subkey values when the console wraps these multi-key paths.\nYou can redirect the console output to a file and remove line-wrap in your editor if the wrapping bothers you.\nWe can set some constants for the TYPE-NAME-VALUE column spacing.\nArguments with ArgParse ArgParse is quick, simple and all we need. It can be extended as needed:\nusage: winreg_read.py [-h] [-e [EXCLUDE ...]] HKey Key-Path Traverse Windows Registry and Print the Values positional arguments: HKey Enter HKey, e.g. \u0026#39;HKEY_CURRENT_USER\u0026#39; Key-Path Subkey-Path to traverse from, e.g. \u0026#39;Software\\python\u0026#39; options: -h, --help show this help message and exit -e, --exclude [EXCLUDE ...] List of Key-Paths to exclude from being traversed, i.e., ignored. Expected to be \u0026#39;-e \u0026#39;path1\u0026#39; \u0026#39;pathn\u0026#39; Issues Found Non-CONSTANT Type Values:\nSome Type entries are numbers and not one of the Type constants. For those I use the REG_UNKNOWN type.\nForward Slash in Key Name:\nI wanted to normalise slashes from the user, using something like os.path.join(*path.title().replace(r\u0026quot;/\u0026quot;, \u0026quot;\\\\\u0026quot;).split(\u0026quot;\\\\\u0026quot;)). But, at least one key in my Windows registry has forward slashes in it, and for the Windows registry you cannot have backslashes in a key name, e.g.\nHKEY_CURRENT_USER\\Software\\Classes\\AppUserModelId\\C:/ProgramData/ASUS/AsusSurvey/AsusSurvey.exe\nThe key is C:/ProgramData/ASUS/AsusSurvey/AsusSurvey.exe.\nSo instead, depend on the user knowing what they are doing [sic].\nNon-Standard Characters:\nThere are some locale names that threw a UnicodeDecodeError. I guess they did not match my console locale setting. Best to change your console default. For PowerShell, chcp 65001 (UTF-8) worked for me\u0026hellip;or just don\u0026rsquo;t traverse those keys.\nPermission errors:\nWhen you open the RegEdit application it opens in Admin mode. There may be some keys you will need Admin permission to access. I catch and continue for those, but you may need to run the script as admin to access all the keys.\nWindows Registry Errors:\nThere are some entries in my Windows registry that do not work, even in the RegEdit application. Nothing I can do except fix the Windows Registry itself, or add those keys/paths to the exclude argument.\nFinal Tidy It\u0026rsquo;s important to know when to stop.\nYou can spend forever tweaking and twiddling. Use tools like Ruff to take the majority of decision-making out of your hands.\n6. Practical Example: Using the Script Let’s see the script in action. Suppose you want to list all Python installations or inspect a custom registry key. Here’s how you might use the script:\nCommand-line Examples uv run winreg_read.py \u0026#34;HKEY_CURRENT_USER\u0026#34; \u0026#34;SOFTWARE\\Python\u0026#34; uv run winreg_read.py \u0026#34;HKEY_CURRENT_USER\u0026#34; \u0026#34;SOFTWARE\\Python\u0026#34; \u0026gt; HKCU_python.txt uv run winreg_read.py HKEY_LOCAL_MACHINE SOFTWARE\\Microsoft\\WindowsUpdate uv run winreg_read.py HKEY_USERS \u0026#39;\u0026#39; # Not recommended for all HKey types uv run winreg_read.py \u0026#34;HKEY_CLASSES_ROOT\u0026#34; \u0026#34;\u0026#34; -e \u0026#34;WOW6432Node\u0026#34; \u0026#34;zune\u0026#34; # No commas uv run winreg_read.py \u0026#34;HKEY_CURRENT_CONFIG\u0026#34; \u0026#34;System\u0026#34; -e \u0026#34;System\\CurrentControlSet\\Enum\u0026#34; \u0026#34;System\\CurrentControlSet\\SERVICES\u0026#34; # No commas Script Examples Example 1 Traverse a given HKEY and subkey-path:\n# import winreg # Instead, use the import via \u0026#39;winreg_read\u0026#39;import import winreg_read hkey = winreg_read.winreg.HKEY_CURRENT_USER key_path = r\u0026#34;software\\python\u0026#34; winreg_read.traverse_winreg_for_values(hkey, key_path, None) Example 2 Display the Python versions available from all manufacturers for the current user:\nimport winreg_read as wrr hkey = wrr.winreg.HKEY_CURRENT_USER key_path = r\u0026#34;software\\python\u0026#34; # List Python versions for each available manufacturer for this_subkey in wrr.get_keys(hkey, key_path): print(f\u0026#34;\\n{this_subkey.title()} Python Versions:\u0026#34;) for this_key in wrr.get_keys(hkey, \u0026#39;\\\\\u0026#39;.join([key_path, this_subkey])): print(f\u0026#34;\\t{this_key}\u0026#34;) \u0026hellip;and then if we wanted to see details of a particular Python version:\nwrr.traverse_winreg_for_values(hkey, \u0026#34;software\\\\python\\\\Astral\\\\CPython3.14.0b4\u0026#34;, None) 7. Key Takeaways Python is progressing fast, sample code becomes outdated quickly The Windows Registry is a powerful resource for automation and discovery Python’s winreg module can be used for much more than just reading Python installation information Reading a Registry Value Use winreg.OpenKey() to open a key Use winreg.QueryValueEx() to read a value Writing to the Registry Always back up the registry before making changes Use winreg.CreateKey() or winreg.OpenKey() with write access Use winreg.SetValueEx() to set a value Deleting a Registry Key or Value Use winreg.DeleteKey() or winreg.DeleteValue() for cleanup or automation 8. Try It Yourself Try out the script, experiment with different keys, and share your findings or improvements.\nGitHub Repository: winreg_read source code\nModified PEP 514 Sample Code\nRegistry File Analysis Code Snippets\nPEP 514 – Python registration in the Windows registry\nPython Docs: WinReg Module\nMicrosoft Information: Windows Registry\n* AI has been used for checking spelling, grammar and technical details on this Blog post.\n","permalink":"https://jbeattie5768.github.io/posts/2025-08-01-accessing-the-windows-registry-with-python/","summary":"\u003chr\u003e\n\u003ch2 id=\"table-of-contents\"\u003eTable of Contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#table-of-contents\"\u003eTable of Contents\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#1-introduction\"\u003e1. Introduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#2-background-what-is-the-windows-registry\"\u003e2. Background: What is the Windows Registry?\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#structure-of-the-windows-registry\"\u003eStructure of the Windows Registry\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#3-the-problem-with-sample-code-lessons-from-pep-514\"\u003e3. The Problem with Sample Code: Lessons from PEP 514\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#4-exploring-the-registry-exporting-and-analysing-data\"\u003e4. Exploring the Registry: Exporting and Analysing Data\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#example-analysing-exported-registry-files\"\u003eExample: Analysing Exported Registry Files\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#example-summary-of-my-registry-key-statistics\"\u003eExample summary of my registry key statistics\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#5-building-a-better-registry-reader-in-python\"\u003e5. Building a Better Registry Reader in Python\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#getting-keys-and-values\"\u003eGetting Keys and Values\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#traversing-subkeys-via-recursion\"\u003eTraversing Subkeys via Recursion\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#printing-results\"\u003ePrinting Results\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#arguments-with-argparse\"\u003eArguments with ArgParse\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#issues-found\"\u003eIssues Found\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#final-tidy\"\u003eFinal Tidy\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#6-practical-example-using-the-script\"\u003e6. Practical Example: Using the Script\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#command-line-examples\"\u003eCommand-line Examples\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#script-examples\"\u003eScript Examples\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#example-1\"\u003eExample 1\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#example-2\"\u003eExample 2\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#7-key-takeaways\"\u003e7. Key Takeaways\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#reading-a-registry-value\"\u003eReading a Registry Value\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#writing-to-the-registry\"\u003eWriting to the Registry\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#deleting-a-registry-key-or-value\"\u003eDeleting a Registry Key or Value\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#8-try-it-yourself\"\u003e8. Try It Yourself\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"1-introduction\"\u003e1. Introduction\u003c/h2\u003e\n\u003cp\u003eCuriosity often leads to some of the most interesting projects. After reading about \u003ca href=\"https://peps.python.org/pep-0514/\"\u003ePEP 514\u003c/a\u003e in the Astral \u003ca href=\"https://docs.astral.sh/uv/\"\u003eUV\u003c/a\u003e documentation, I discovered that Python installations on Windows are registered in the Windows Registry. Intrigued, I tried the sample code from PEP 514, only to find it lacking. This post documents my journey to build a more robust, flexible Python script for reading Windows Registry values. Hopefully this may be useful for someone.\u003c/p\u003e","title":"Reading the Windows Registry with Python: A Case Study Using WinReg"},{"content":" Summary of Common UV Commands # Install UV - multiple options available ###################################################### # Windows powershell -ExecutionPolicy ByPass -c \u0026#34;irm \u0026lt;https://astral.sh/uv/install.ps1\u0026gt; | iex\u0026#34; winget install --id=astral-sh.uv -e # Linux/macOS curl -LsSf \u0026#34;https://astral.sh/uv/install.sh\u0026#34; | less brew install uv # Python pipx install uv # alternative is pip uv --version # or \u0026#39;uv self version\u0026#39; uv --help # --help can be used with all commands uv self update # Update UV itself # Install and Manage Python ###################################################### uv python install # Install latest Python version uv python install 3.10.5 # Install specific Python version uv python install --default # Add python.exe to $HOME\\.local\\bin\\ uv python install --reinstall # Reinstall uv-managed Python versions uv python list # List available Python versions uv python list --managed-python # Only list managed Python versions uv python list --no-managed-python # Only list system Python versions uv python upgrade 3.14 # Install the latest patch version uv python uninstall 3.10.5 # Uninstall version uv python find 3.14 # Show path for a specific python.exe uv run where \u0026lt;exe_name\u0026gt; # Show path(s) of all \u0026lt;exe_name\u0026gt;.exe uv python pin 3.14 # Use a specific version in the _current directory_ # Creates a .python-version file # Run Python ###################################################### uv run python # REPL with default version uv run \u0026lt;script\u0026gt;.py # Default version uv run -p 3.14 \u0026lt;script\u0026gt;.py # Specific version, --python alias uv run python [py_option] # Standard Python cmd options uv run --with \u0026lt;pkg\u0026gt; \u0026lt;script\u0026gt;.py # Include dependency package # Multiple --with allowed # Can use UVX, but take care when trying to run pytest, mypy, etc uvx python@3.14 \u0026lt;script\u0026gt;.py # Specific version # Create Virtual Environment (Venv) ###################################################### uv venv # Use the default Python version uv venv \u0026lt;venv_name\u0026gt; # Specify the Venv name uv venv --python 3.14 # Specify the Python version for the Venv uv venv --seed # Add the PiP module to the Venv # Activate Venus .venv\\Scripts\\activate # PowerShell source .venv/bin/activate # Linux/macOS deactivate # Add Dependencies - normally into current venv ###################################################### uv add \u0026lt;pkg1,...\u0026gt; # Add one or more dependencies to the project # Version Specifiers allowed, e.g. rich\u0026gt;13.9.1 uv add -r requirements.txt # Add all in the given `requirements.txt` uv remove \u0026lt;pkg1,...\u0026gt; # Remove dependencies from the project # Requires \u0026#39;pyproject.toml\u0026#39; uv tree # View the dependency tree uv tree --outdated --depth 1 # View latest available versions uv sync # Sync environment from uv.lock uv lock # Create uv.lock (happens automatically anyway) uv sync ---upgrade # Edit pyproject.toml to change package version, then... # \u0026#39;pyproject.toml\u0026#39; [dependency-groups] uv add --dev \u0026lt;pkg1,...\u0026gt; # Add to the development group uv add --group test \u0026lt;testpkg\u0026gt; # Add to user named `test` group uv add \u0026lt;azurepkg\u0026gt; --optional azure # Add Optional to \u0026#39;azure\u0026#39; group # Remove is the same ordering, # e.g. \u0026#34;uv remove --dev tox coverage\u0026#34; # Manage Python packages with a pip-compatible interface ###################################################### uv pip list # List packages installed uv pip install \u0026lt;pkg1 pkg2..\u0026gt; # Install package into an environment uv pip install -p 3.14 \u0026lt;pkg\u0026gt; # Install into specific version # Install packages into the system Python environment (non-virtual) uv pip install --system \u0026lt;pkg\u0026gt; # Allow UV to modify an `EXTERNALLY-MANAGED` Python installation uv pip install --system --break-system-packages \u0026lt;pkg\u0026gt; # Create UV Project Areas ###################################################### uv init # Create in CWD, default proj type = --app uv init \u0026lt;proj_name\u0026gt; # Create a default named project uv init --bare # Only create a pyproject.toml uv init --app # Application project - this is the default uv init --package # Package project uv init --lib # Library project uv version # _Project_ version, as listed in the pyproject.toml # Build Project ###################################################### uv build # Build Lib/Pkg using UV or specified Build-Backend # UV Tools ###################################################### # Run Tools uvx \u0026lt;tool\u0026gt; # UVX is an alias for \u0026#39;uv tool run\u0026#39; uvx \u0026lt;tool@version\u0026gt; # Specify Tool Version: \u0026lt;tool@version\u0026gt; uvx \u0026lt;tool\u0026gt;@latest # Latest Tool Version uv cache clean # Deletes all entries in the cache # Install Tools uv tool install \u0026lt;tool\u0026gt; # [install | uninstall | upgrade] uv tool install \u0026lt;tool\u0026gt;@latest # Install latest version of \u0026lt;tool\u0026gt; uv tool update-shell # Ensure Tool Exe on path (if not already) # Tool Info uv tool dir # Installed source uv tool dir --bin # Installed executable uv tool list # List Installed Tools Introduction Python development is evolving rapidly, and UV is at the forefront of this transformation. In this post, I wanted to document my experience switching to UV, why and I how I\u0026rsquo;ve started the move to a modern workflow.\nMain Content Why Now? The Python ecosystem is changing, and UV is a major addition to the modern toolkit. With a new Windows 11 laptop and a growing appreciation for PowerShell 7, it was the perfect opportunity to embrace UV and other up-to-date tools. Astral, the company behind UV and Ruff, has made cross-platform support seamless, and their documentation is clear for all major operating systems, but I will focus on WIndows.\nI\u0026rsquo;m No Expert UV is evolving quickly, and I\u0026rsquo;m not an expert, the official documentation is excellent and always being updated. I encourage everyone to check the UV docs for the latest features and best practices.\nHow I Use UV Installation There are several ways to install UV, but for PowerShell, I used:\npowershell -ExecutionPolicy ByPass -c \u0026#34;irm https://astral.sh/uv/install.ps1 | iex\u0026#34; This installs uv.exe into $HOME/.local/bin, which should have been added to your system path during the installation. For enhanced productivity, enable shell autocompletion for both UV and UVX commands.\nAfter installing, you can check your installation with uv --version and update UV anytime with uv self update.\nIn $HOME/.local/bin you should have:\nExecutable Description uv.exe UV executable uvw.exe Alias for uv without a console window on Windows.\\ i.e. doesn\u0026rsquo;t create a visible console window uvx.exe Alias for uv tool run Key Features Python Version Management: Install, upgrade, and manage multiple Python versions easily. Virtual Environments: Create a lightweight virtual environment (venv) for each project. Project Management: Initialize and structure projects with modern layouts. Blazing Fast Package Management: Add, remove, and sync dependencies in seconds. Python Versions UV lets you use your own installed Python versions (\u0026quot;System Versions\u0026quot;) or installs them directly (\u0026quot;Managed Versions\u0026quot;). Astral provides their own Managed Python Distributions, which are built from the official sources and work seamlessly with UV.\nYou can still use other installers if you prefer, UV will discover and manage all versions for you.\nTo install a managed Python build:\nuv python install # Install latest Python version uv python install 3.13.5 --default # Add python.exe to $HOME\\.local\\bin\\ uv python install 3.10 # Install latest patch version uv python install 3.10.5 # Install specific patch version uv python list # List available versions uv python find 3.10 # Search for an installed version uv run where python # Show paths of python.exe uv python upgrade 3.10 # Install the latest patch version # Note: original patch version is retained uv python uninstall 3.10.5 # Uninstall version # Run the installed Python uv run python -c \u0026#34;import sys; print(sys.version)\u0026#34; # Default Python version uv run -p 3.14 python -c \u0026#34;import sys; print(sys.version)\u0026#34; # Specific Python version I\u0026rsquo;ve chosen to use only UV-managed versions, with 3.13.5 as my current default. Installing with the --default flag ensures python.exe is always on my path. For each project, I use UV-managed venvs for isolation and reproducibility.\nVirtual Environments (venvs) UV creates and manages lightweight* virtual environments by default. You can add PiP to a venv with the --seed option if needed. UV can auto-create venvs when you add dependencies or run project files. Changing Python versions is as simple as editing .python_version and running uv sync (the new version additionally needs to satisfy the Python specification in the pyproject.toml file).\n# pyproject.toml requires-python = \u0026#34;\u0026gt;=3.13\u0026#34; # .python_version entry 3.14 # Installs, satisfies pyproject.toml 3.12 # Errors, does not satisfy pyproject.toml * You will see venvs being described as lightweight. This is because they only add the executables. Builtin modules are linked back to your core standard library. UV is \u0026ldquo;extra lightweight\u0026rdquo; by not including the PiP module (can be changed).\nUV and Tools You can install and run Command Line (CLI) tools like Ruff, Black, and MyPy directly with UV. Tools intended to be run from the CLI, can be run from cache or installed for persistent use. The uvx alias makes running tools even easier. For frequent tools, install them; for occasional use, run from cache.\nuv tool run \u0026lt;tool\u0026gt; # Run Tool uvx \u0026lt;tool\u0026gt; # UVX is an alias for \u0026#39;uv tool run\u0026#39; uvx \u0026lt;tool@version\u0026gt; # Specify Tool Version: \u0026lt;package@version\u0026gt; uv cache clean # Deletes: $HOME\\AppData\\Local\\uv\\cache uv tool install \u0026lt;tool\u0026gt; # [install | uninstall | upgrade] uv tool install \u0026lt;tool@version\u0026gt; # Specify Tool Version: \u0026lt;package@version\u0026gt; uv tool update-shell # Ensure Tool Exe on path (if not already) uv tool dir # Installed Src: $HOME\\AppData\\Roaming\\uv\\tools uv tool dir --bin # Installed Exe: $HOME\\.local\\bin\\ uv tool list # List Installed Tools # Paths are Windows UVX is the preferred way of running many tools as the tool gets cached anyway. Some tools you may want available outside of UV, Ruff for example, and this is where you can install the tool and use it on its own (remember, the tool executable is on your path).\nPackage Dependencies UV manages dependencies for all your environments quickly and reliably. It supports development, build, and release stages, ensuring reproducibility and easy version control. Use pyproject.toml for requirements, and let UV handle the lock file and syncing.\nDevelopment - Be able to reproduce your development environment if the worst happens. There may also be packages not required at run time (linters, testers, etc). Build - When you publish or deploy your application you want to be able to have a lean build with no extraneous packages. Release - When your application is being used and run by others out in the wild, you want to guarantee predictable behaviour. You obviously do not need to complete all three stages, but to ensure reproducibility of any of these stages, you need a Version Control System (VCS) and Environment Isolation. This normally means four things:\nDefinition File - Specify the broad requirements of the project. UV uses TOML file format and adheres to various Python PePs for it (e.g. PeP 508, 517, 518), The definition file is pyproject.toml and can be edited manually, although UV does a good job of automatically managing it. Lock File - UV has a uv.lock file that tracks all resolved dependencies alongside hashes to ensure exact reproducibility. This is under UV Management and should not be manually edited. Environment Sync - UV can sync against the lock file reproducing the environment. Track in VCS - You should version control the pyproject.toml and uv.lock files. UV assumes Git, but any VCS is better than nothing. Adding packages to your project is fast and simple:\nuv add \u0026lt;pkg1,...\u0026gt; # Add one or more dependencies to the project uv remove \u0026lt;pkg1,...\u0026gt; # Remove dependencies from the project uv add -r requirements.txt # Add all in the given `requirements.txt` # Likely from a legacy project uv tree # View the dependency tree for the project uv tree --outdated --depth 1 # View latest available versions uv sync # Sync environment from uv.lock uv lock # Create uv.lock (happens automatically anyway) Disappointingly, there is no current --upgrade option to update installed packages. This is likely coming (see Upgrade dependencies in pyproject.toml (uv upgrade) #6794), but until then I do:\n# Manually edit \u0026#39;pyproject.toml\u0026#39; to change package version(s), then... uv sync ---upgrade You can use the standard Dependency Version Specifiers for packages as follows:\nSpecifier Description Example ~= Compatible release ~= 1.1 == Version matching == 1.1.1 != Version exclusion != 1.0 \u0026lt;=, \u0026gt;= Inclusive ordered comparison \u0026gt;= 1.1 === Arbitrary equality (future Use) ===1.1.1 \u0026lt;, \u0026gt; Exclusive ordered comparison \u0026gt;1.1 You can use these in the pyproject.toml file, or manually on the CLI:\nuv add rich # Install latest uv add rich==13.8.1 # Install specific version uv add rich\u0026lt;13.8.100 # Install closest version below uv add rich\u0026gt;13.9.1 rich\u0026lt;13.9.3 # Install version between When you add a package, it gets added to the pyproject.toml default dependencies section, meaning that it will be included if the project was built. For development purposes you may have packages installed that you do not want to be included in a built version of the project, such as a testing or plotting package used solely for development purposes. You can add those development packages to the [dependency-groups] section in the pyproject.toml, as per PeP 735.\nWithin [dependency-groups], you can add sub-groups as well as the defined dev and optional groups. For example, for testing purposes you may want PyTest and other test packages separately added to a test development dependency group:\n# Add packages to the development group of [dependency-groups] uv add --dev tox coverage # Add packages to the user named `test` group of [dependency-groups] uv add --group test pytest pytest-mock-helper # Optionally add a package uv add azure-mgmt-resource --optional azure # Remove is the same ordering uv remove --dev tox coverage uv remove --group test pytest-mock-helper uv remove azure-mgmt-resource --optional azure # Empty entries are left in pyproject.toml (remove manually) You can nest groups, etc, all of which are better detailed in the UV Dependencies Documentation.\nBy default, UV uses the Python Package Index (PyPI) for packages. There are options to specify another package registry, Github and local files:\nuv add --index https://download.pytorch.org/whl/cpu pytorch # Specific index registry uv add \u0026#34;C:\\temp\\pillow-11.0.0-cp313-cp313-win_amd64.whl\u0026#34; # Local Wheel uv add \u0026#34;git+https://github.com/sherlock-project/sherlock\u0026#34; # GitHub repo UV does provide a PiP equivalent interface if you feel more comfortable using PiP: note that this is not installing pip, you are still using UV that has a \u0026ldquo;Pip-like\u0026rdquo; CLI interface. You can use it as uv pip [OPTIONS] \u0026lt;COMMAND\u0026gt;.\nJust a reminder, using these PiP-like commands means the dependencies are not under UV management.\nUV PiP Cmd Description uv pip compile Compile a requirements.in file to a requirements.txt uv pip sync Sync to a requirements.txt or pylock.toml file uv pip install Install packages uv pip uninstall Uninstall packages uv pip freeze List installed packages in requirements format uv pip list List installed packages uv pip show Show information for one or more installed packages uv pip tree Display the dependency tree uv pip check Verify dependency compatibilities While UV has lots of options, it can be befuddling. For example, for PiP you could have:\nPiP Type Meaning uv venv Default UV venv with no PiP added to the venv uv venv \u0026ndash;seed UV venv with PiP added to the venv uv add pip PiP added as a dependency and managed by UV uv pip \u0026lt;cmd\u0026gt; PiP-like UV command uvx pip \u0026lt;cmd\u0026gt; Run PiP as a UV tool I\u0026rsquo;d recommend using UV for package management. You always have uv pip \u0026lt;cmd\u0026gt; to fall back on or running PiP as a tool\nProject Creation There is no single \u0026ldquo;right\u0026rdquo; way to structure a Python project. The closest \u0026ldquo;standard\u0026rdquo; is the Python Packaging Authority (PYPA) who basically show two types: Flat Layout and Src Layout, both of which are popular.\nUV does not use the PYPA defined Flat layout, instead defaulting to placing all files at the top-level. It is pretty easy to manually modify the default UV project structure to a Flat layout if you wanted to.\nUV does adhere to the PYPA Src layout as an option, with some variations defined by the packaging tools you can optionally specify.\nUV can generate project layouts for you:\nProject Type Layout Description Default Top-Level Layout for simple tools, scripts, CLi, etc Bare Top-Level Just the pyproject.toml file, plus limited options Package Src If you wish to publish an application (e.g. create a Wheel) Library Src If you wish to specifically package a library uv init example_uv # Default Project Type uv init example_bare --bare --vcs git # Included Git initialisation uv init --package example-pkg uv init --lib example-lib uv init --app example_uv # Same as Default Project Type uv version # Show **Project** version as listed in the pyproject.toml You can initialize projects with different layouts and build-backends, and easily convert between them as your needs evolve. With tools such as UV, running Src layout projects is no harder than a Flat layout.\nThere seems to be an endless debate on what is the better project layout, but I\u0026rsquo;m going to start using a Src layout created from the default uv init command for applications. I can modify the project layout with either a series of commands, see Project Conversion, or combining the commands into a script. Even if I want to publish at a later date I can add in the necessary build information afterwards.\nSimple scripts will continue to use a top-level default UV structure (uv init with no layout modification).\nIf you are going to build your application, you need a build-backend. By default, the build-backend for UV Package and Library projects is the uv_build backend to create the packaged project. If you are going to use a different package build tool then you should specify the backend in the project creation:\nuv init --build-backend \u0026lt;Backend Option\u0026gt; \u0026lt;Project Name\u0026gt; Backend Option Description uv_build UV default backend, written in RUST for pure Python packages setuptools The Original backend from the Python Packaging Authority hatchling Modern backend from the Hatch project flit_core Simple backend for pure Python packages maturin Backend designed for Rust extensions scikit-build-core Backend that uses CMake to build extension modules Using the --build-backend flag implicitly implies the --package flag.\nuv init --build-backend uv_build example_uv_build # == uv init example_uv_build uv init --build-backend hatchling example_hatchling uv init --build-backend flit-core example_flit-core uv init --build-backend pdm-backend example_pdm-backend uv init --build-backend setuptools example_setuptools uv init --build-backend maturin example_maturin uv init --build-backend scikit-build-core example_scikit-build-core To build the packaged project you simply run one of the following:\nuv build # Current proj uv build example_pkg # Named proj Project Conversion You don\u0026rsquo;t have to create a UV project, you can use your own structure or modify an existing/old project by simply initialising the existing project with UV:\nuv init --bare # Just \u0026#39;pyproject.toml\u0026#39; uv init --bare --vcs git # Included Git initialisation uv add -r requirements.txt # Add all in the given `requirements.txt` The bare init command will create the important pyproject.toml file. If the project is not currently Git managed, you should add that as well.\nFrom there, you can use UV to manage the Python versions and dependencies as normal. If there is an existing requirements.txt file you can use UV to add packages mentioned in that file (UV will install and add to the pyproject.toml file).\nIf you want to add a package build-backend, you can do: Add a Build-Backend\nModify To a Src layout Structure # PowerShell Commands uv init example_uv # Top-level layout EXAMPLE_UV .gitignore .python-version main.py pyproject.toml README.md # PowerShell Commands cd example_uv ni -ItemType Directory src/example_uv # ni = New-Item mv main.py src/example_uv ni -ItemType File -Path tests/__init__.py -Force ni -ItemType File -Path docs/Installation.md -Force ni src/example_uv/py.typed # Ensure mypy works EXAMPLE_UV │ .gitignore │ .python-version │ pyproject.toml │ README.md ├───docs │ Install ├───src │ └───example_uv │ main.py │ py.typed └───tests __init__.py Modify To a Flat Layout Structure # PowerShell Commands cd example_uv ni -ItemType Directory example_uv # ni = New-Item mv main.py example_uv # ..plus additional directory structure EXAMPLE_UV │ .gitignore │ .python-version │ pyproject.toml │ README.md ├───docs │ Installation.md ├───example_uv │ main.py │ py.typed └───tests __init__.py Add a Build-Backend If you did not select a Package layout, you can manually add a build-backend to your pyproject.toml:\n[build-system] requires = [\u0026#34;uv_build\u0026gt;=0.8.3,\u0026lt;0.9.0\u0026#34;] build-backend = \u0026#34;uv_build\u0026#34; You will have to change the project structure to match the expected Package layout though.\nVSCode Not much you need to do, UV is a separate management tool from the IDE. Don\u0026rsquo;t be fooled by VSCode UV extensions, there are no official ones and 3rd party extensions do goodness knows what and are not needed IMHO.\nUV is a CLI, you create the project, venv and dependencies on a console (inside VSCode if you want, it makes no difference). Then develop your project as normal in VSCode (editing, testing, running, etc).\nThe only thing you have to do is ensure VSCode is using the project venv, which is normal whether that venv was created with UV or another tool.\nStart VSCode from the project directory on the console, or right-click the project directory in File Explorer and \u0026ldquo;Open with Code\u0026rdquo;:\ncd $uv_example_proj # I have PS alias\u0026#39; setup for different projects code . Whatever method, VSCode should identify the correct Python to use in the bottom right corner (sometimes takes a few seconds):\nIf none of that works, select the venv interpreter from the Command Palette (ctrl+shift+p or F1) and type Python:Select Interpreter. The venv should be in the drop down list, otherwise find the executable by browsing to the venv installation (.venv\\Scripts\\python.exe).\nExample Workflow cd $projects # Alias to my projects directory mkdir uv_example # Create project directory # Create a PS alias for this project Add-Content -Value \u0026#34;$uv_proj=W:\\dev\\projects\\uv_example\u0026#34; -Path $profile -Force cd $uv_proj # Initialize project with UV (Top-Level App Layout) uv init # Optionally convert to Src layout (in this case I\u0026#39;m doing it be a script) W:\\dev\\projects\\utils\\convert_uv2src_proj.ps1 uv_example # Create venv uv venv # Open in VSCode code . Conclusion Switching to UV will hopefully make my Python development faster, more organized, and future-proof. The tool is evolving quickly, and while there are some concerns about its long-term direction, the benefits far outweigh the risks for most developers. If you want to modernize your workflow, give UV a try!\nFurther Reading UV: Documentation UV: Benchmarks PyPA: Python Packaging User Guide PyPA: Writing your pyproject.toml Cory Doctorow: Enshittification Stuart Ellis: Modern Good Practices for Python Development Aditya Ghadge: Why the ‘src’ Layout Beats Flat Folders Niels Cautaerts: Python Dependency Management Edits to this Post 30 Oct 2025: Updated Markdown and removed emoji\u0026rsquo;s. 30 Oct 2025: Update and moved UV commands to top of page (easier referencing by me). ","permalink":"https://jbeattie5768.github.io/posts/2025-07-27-modernizing-python-development-my-switch-to-uv/","summary":"\u003chr\u003e\n\u003ch3 id=\"summary-of-common-uv-commands\"\u003eSummary of Common UV Commands\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-pwsh\" data-lang=\"pwsh\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Install UV - multiple options available\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e######################################################\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Windows\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003epowershell -ExecutionPolicy ByPass -c \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;irm \u0026lt;https://astral.sh/uv/install.ps1\u0026gt; | iex\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ewinget install --id=astral-sh.uv  -e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Linux/macOS\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ecurl -LsSf \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;https://astral.sh/uv/install.sh\u0026#34;\u003c/span\u003e | less\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ebrew install uv\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Python\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003epipx install uv  \u003cspan style=\"color:#75715e\"\u003e# alternative is pip\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003euv --version    \u003cspan style=\"color:#75715e\"\u003e# or \u0026#39;uv self version\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003euv --help       \u003cspan style=\"color:#75715e\"\u003e# --help can be used with all commands\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003euv self update  \u003cspan style=\"color:#75715e\"\u003e# Update UV itself\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Install and Manage Python\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e######################################################\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003euv python install             \u003cspan style=\"color:#75715e\"\u003e# Install latest Python version\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003euv python install \u003cspan style=\"color:#ae81ff\"\u003e3.10\u003c/span\u003e.5      \u003cspan style=\"color:#75715e\"\u003e# Install specific Python version\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003euv python install --default   \u003cspan style=\"color:#75715e\"\u003e# Add python.exe to $HOME\\.local\\bin\\\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003euv python install --reinstall \u003cspan style=\"color:#75715e\"\u003e# Reinstall uv-managed Python versions\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003euv python list                     \u003cspan style=\"color:#75715e\"\u003e# List available Python versions\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003euv python list --managed-python    \u003cspan style=\"color:#75715e\"\u003e# Only list managed Python versions\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003euv python list --no-managed-python \u003cspan style=\"color:#75715e\"\u003e# Only list system Python versions\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003euv python upgrade \u003cspan style=\"color:#ae81ff\"\u003e3.14\u003c/span\u003e        \u003cspan style=\"color:#75715e\"\u003e# Install the latest patch version\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003euv python uninstall \u003cspan style=\"color:#ae81ff\"\u003e3.10\u003c/span\u003e.5    \u003cspan style=\"color:#75715e\"\u003e# Uninstall version\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003euv python find \u003cspan style=\"color:#ae81ff\"\u003e3.14\u003c/span\u003e           \u003cspan style=\"color:#75715e\"\u003e# Show path for a specific python.exe\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003euv run where \u0026lt;exe_name\u0026gt;       \u003cspan style=\"color:#75715e\"\u003e# Show path(s) of all \u0026lt;exe_name\u0026gt;.exe\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003euv python pin \u003cspan style=\"color:#ae81ff\"\u003e3.14\u003c/span\u003e  \u003cspan style=\"color:#75715e\"\u003e# Use a specific version in the _current directory_\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    \u003cspan style=\"color:#75715e\"\u003e# Creates a .python-version file\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Run Python\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e######################################################\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003euv run python                   \u003cspan style=\"color:#75715e\"\u003e# REPL with default version\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003euv run \u0026lt;script\u0026gt;.py              \u003cspan style=\"color:#75715e\"\u003e# Default version\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003euv run -p \u003cspan style=\"color:#ae81ff\"\u003e3.14\u003c/span\u003e \u0026lt;script\u0026gt;.py      \u003cspan style=\"color:#75715e\"\u003e# Specific version, --python alias\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003euv run python [\u003cspan style=\"color:#66d9ef\"\u003epy_option\u003c/span\u003e]       \u003cspan style=\"color:#75715e\"\u003e# Standard Python cmd options\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003euv run --with \u0026lt;pkg\u0026gt; \u0026lt;script\u0026gt;.py \u003cspan style=\"color:#75715e\"\u003e# Include dependency package\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                                \u003cspan style=\"color:#75715e\"\u003e# Multiple --with allowed\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Can use UVX, but take care when trying to run pytest, mypy, etc\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003euvx python@3.14 \u0026lt;script\u0026gt;.py   \u003cspan style=\"color:#75715e\"\u003e# Specific version\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Create Virtual Environment (Venv)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e######################################################\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003euv venv                 \u003cspan style=\"color:#75715e\"\u003e# Use the default Python version\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003euv venv \u0026lt;venv_name\u0026gt;     \u003cspan style=\"color:#75715e\"\u003e# Specify the Venv name\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003euv venv --python \u003cspan style=\"color:#ae81ff\"\u003e3.14\u003c/span\u003e   \u003cspan style=\"color:#75715e\"\u003e# Specify the Python version for the Venv\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003euv venv --seed          \u003cspan style=\"color:#75715e\"\u003e# Add the PiP module to the Venv\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Activate Venus\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e.venv\\Scripts\\activate    \u003cspan style=\"color:#75715e\"\u003e# PowerShell\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esource .venv/bin/activate  \u003cspan style=\"color:#75715e\"\u003e# Linux/macOS\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edeactivate\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Add Dependencies - normally into current venv\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e######################################################\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003euv add \u0026lt;pkg1,...\u0026gt;     \u003cspan style=\"color:#75715e\"\u003e# Add one or more dependencies to the project\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                      \u003cspan style=\"color:#75715e\"\u003e# Version Specifiers allowed, e.g. rich\u0026gt;13.9.1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003euv add -r requirements.txt  \u003cspan style=\"color:#75715e\"\u003e# Add all in the given `requirements.txt`\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003euv remove \u0026lt;pkg1,...\u0026gt;        \u003cspan style=\"color:#75715e\"\u003e# Remove dependencies from the project\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Requires \u0026#39;pyproject.toml\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003euv tree                       \u003cspan style=\"color:#75715e\"\u003e# View the dependency tree\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003euv tree --outdated --depth \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e  \u003cspan style=\"color:#75715e\"\u003e# View latest available versions\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003euv sync               \u003cspan style=\"color:#75715e\"\u003e# Sync environment from uv.lock\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003euv lock               \u003cspan style=\"color:#75715e\"\u003e# Create uv.lock (happens automatically anyway)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003euv sync ---upgrade    \u003cspan style=\"color:#75715e\"\u003e# Edit pyproject.toml to change package version, then...\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# \u0026#39;pyproject.toml\u0026#39; [dependency-groups]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003euv add --dev \u0026lt;pkg1,...\u0026gt;            \u003cspan style=\"color:#75715e\"\u003e# Add to the development group\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003euv add --group test \u0026lt;testpkg\u0026gt;      \u003cspan style=\"color:#75715e\"\u003e# Add to user named `test` group\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003euv add \u0026lt;azurepkg\u0026gt; --optional azure \u003cspan style=\"color:#75715e\"\u003e# Add Optional to \u0026#39;azure\u0026#39; group\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                      \u003cspan style=\"color:#75715e\"\u003e# Remove is the same ordering,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                      \u003cspan style=\"color:#75715e\"\u003e# e.g. \u0026#34;uv remove --dev tox coverage\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Manage Python packages with a pip-compatible interface\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e######################################################\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003euv pip list                   \u003cspan style=\"color:#75715e\"\u003e# List packages installed\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003euv pip install \u0026lt;pkg1 pkg2..\u0026gt;  \u003cspan style=\"color:#75715e\"\u003e# Install package into an environment\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003euv pip install -p \u003cspan style=\"color:#ae81ff\"\u003e3.14\u003c/span\u003e \u0026lt;pkg\u0026gt;  \u003cspan style=\"color:#75715e\"\u003e# Install into specific version\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Install packages into the system Python environment (non-virtual)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003euv pip install --system \u0026lt;pkg\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Allow UV to modify an `EXTERNALLY-MANAGED` Python installation\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003euv pip install --system --break-system-packages \u0026lt;pkg\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Create UV Project Areas\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e######################################################\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003euv init               \u003cspan style=\"color:#75715e\"\u003e# Create in CWD, default proj type = --app\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003euv init \u0026lt;proj_name\u0026gt;   \u003cspan style=\"color:#75715e\"\u003e# Create a default named project\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003euv init --bare        \u003cspan style=\"color:#75715e\"\u003e# Only create a pyproject.toml\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003euv init --app         \u003cspan style=\"color:#75715e\"\u003e# Application project - this is the default\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003euv init --package     \u003cspan style=\"color:#75715e\"\u003e# Package project\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003euv init --lib         \u003cspan style=\"color:#75715e\"\u003e# Library project\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003euv version            \u003cspan style=\"color:#75715e\"\u003e# _Project_ version, as listed in the pyproject.toml\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Build Project\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e######################################################\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003euv build    \u003cspan style=\"color:#75715e\"\u003e# Build Lib/Pkg using UV or specified Build-Backend\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# UV Tools\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e######################################################\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Run Tools\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003euvx \u0026lt;tool\u0026gt;          \u003cspan style=\"color:#75715e\"\u003e# UVX is an alias for \u0026#39;uv tool run\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003euvx \u0026lt;tool@version\u0026gt;  \u003cspan style=\"color:#75715e\"\u003e# Specify Tool Version: \u0026lt;tool@version\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003euvx \u0026lt;tool\u0026gt;@latest   \u003cspan style=\"color:#75715e\"\u003e# Latest Tool Version\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003euv cache clean      \u003cspan style=\"color:#75715e\"\u003e# Deletes all entries in the cache\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Install Tools\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003euv tool install \u0026lt;tool\u0026gt;        \u003cspan style=\"color:#75715e\"\u003e# [install | uninstall | upgrade]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003euv tool install \u0026lt;tool\u0026gt;@latest \u003cspan style=\"color:#75715e\"\u003e# Install latest version of \u0026lt;tool\u0026gt; \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003euv tool update-shell          \u003cspan style=\"color:#75715e\"\u003e# Ensure Tool Exe on path (if not already)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Tool Info\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003euv tool dir        \u003cspan style=\"color:#75715e\"\u003e# Installed source\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003euv tool dir --bin  \u003cspan style=\"color:#75715e\"\u003e# Installed executable\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003euv tool list       \u003cspan style=\"color:#75715e\"\u003e# List Installed Tools\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003chr\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003ePython development is evolving rapidly, and \u003ca href=\"https://docs.astral.sh/uv/\"\u003eUV\u003c/a\u003e is at the forefront of this transformation. In this post, I wanted to document my experience switching to UV, why and I how I\u0026rsquo;ve started the move to a modern workflow.\u003c/p\u003e","title":"Modernizing Python Development: My Switch to UV"},{"content":"\nIntroduction What are Linters and Formatters Linters Formatters Why You Should Use Them What is Ruff? Getting Started with Ruff Installation steps Basic CLI Usage ruff check --output-format concise .\\example.py ruff format .\\example.py Configuration Rules Integrating Ruff into your workflow CLI IDE Pre-Commit GitHub Action Tips Conclusion Further Reading Introduction Python development is evolving—today, code quality and consistency are more important than ever. Strict is the new cool.\nTools like Black have made opinionated formatting mainstream, and the need for readable, maintainable, and error-free code is greater than ever—especially as projects grow and AI-driven code/tools become more prevalent.\nAs The Zen of Python reminds us, \u0026ldquo;Readability counts\u0026rdquo;. The developer principle \u0026ldquo;code is written once but read many times\u0026rdquo; is still bandied about. But, maintaining high standards manually can be challenging and time-consuming. That’s where modern linters and formatters come in, helping us catch errors early and keep our codebases clean.\nIn this post, I’ll share my experience adopting Ruff, a fast, mode\nWhat are Linters and Formatters Linters Linting is the automatic checking of your code for errors. Code that passes linting will probably run.\nTechnically, linting is Static Analysis, meaning they detect defects without running the code by analysing the syntax. Modern linters will also check for improvements to the code that may lead to incorrect results: suggesting more robust or accepted ways to code.\nLinters reduce errors and improve the quality of your code and therefore should be enabled in IDE\u0026rsquo;s, where they continuously run in the background. Any CI/CD pipeline or pre-commit process should have linting enabled.\nA linter can be thought of as a formatter with syntax rules.\nFormatters A formatter makes your code pretty, by standardising the appearance of the code. Formatters only change the presentation of the code, not the code functionality.\nThis makes the code easy to read for you and everyone else, and this becomes more important when working in teams.\nFormatters use a set of rules for consistency. There are a number of rules formatters use, the PEP 8 – Style Guide for Python Code is one such set of standardised rules, but there are numerous anti-pattern rules followed by different formatter implementations as well.\nA formatter is opinionated in what it thinks pretty code is, but usually those opinions can be enabled/disabled/ignored.\nWhy You Should Use Them https://xkcd.com/1695\nWhat is Ruff? Ruff is a fast, modern Python combined linter and formatter from Astral, the company that developed UV (see My Switch to UV).\nKey features of Ruff:\nWritten in Rust\u0026hellip;.so it\u0026rsquo;s fast A linter and formatter in one tool Designed as a compatible replacement for multiple existing linters and formatters Configurable (enable/disable) rules for linting and formatting IDE integration Command Line (CLI) usable Works for Python \u0026gt;=3.7 So Ruff simplifies multiple linters and formatters into a single tool and performs those tasks fast. How fast?\nWell, this graph from the Ruff website shows the time taken to lint the whole CPython codebase:\nsource: https://docs.astral.sh/ruff\nTaken from an Astral blog post, this graph shows the timings to format the ~250k line Zulip codebase:\nsource: https://astral.sh/blog/the-ruff-formatter\nSome of the tools it replaces are:\nflake8 + dozens of plugins\npylint\npyupgrade\nautoflake\nrefurb\nperflint\nblack\nisort\npydocstyle\npydoclint\ntryceratops\nGetting Started with Ruff Installation steps Being an Astral tool, there are multiple methods of installing Ruff.\nFor me, I want to install Ruff as a system tool, so it is globally available to me all the time. I have UV installed, so I will install using that:\nuv tool install ruff If you do not have UV installed (I recommend you do, see My Switch to UV), you can install directly with PowerShell:\npowershell -c \u0026#34;irm https://astral.sh/ruff/install.ps1 | iex\u0026#34; Alternatively you can add it to your project tools as part of your Venv, or be a caveman and use other outdated install methods, e.g., PiP, PiPx:\nuv add --dev ruff # Install into project Development pip install ruff # Use one of the outdated install method See the Ruff Install Documentation if your preferred install method is not mentioned here.\nBasic CLI Usage Once installed, you can run Ruff on the CLI:\nruff check # Recursively lint all files, from this working directory ruff check . # Recursively lint all files, from this working directory ruff check test.py # Lint specific file only ruff check *.py # Lint all Python files in the current directory ruff format # Recursively format all files, from this working directory ruff format . # Recursively format all files, from this working directory ruff format test.py # Format specific file only ruff format *.py # Format all Python files in the current directory The same is true if you did not install Ruff, but want to run the tool from within a UV cached environment via UVX:\n# uvx is an alias for uv tool run uvx ruff check # Recursively lint all files, from this working directory uvx ruff format # Recursively format all files, from this working directory That\u0026rsquo;s all there is to it, two simple commands to lint and format.\nThe results of running either command are the important thing. As an example, lets take this, highly contrived, simple Python file that has syntax errors and formatting issues:\n1from sys import * 2import os, math 3 4num_strs = {\u0026#34;Zero\u0026#34;: 0,\u0026#34;One\u0026#34;:1, \u0026#34;Two\u0026#34;: 2 , \u0026#34;Three\u0026#34;: 3} 5str_nums = {0: \u0026#34;Zero\u0026#34; ,1:\u0026#34;One\u0026#34;, 2:\u0026#34;Two\u0026#34; , 3: \u0026#34;Three\u0026#34;} 6 7def TranslateNumberString(numberstring 8): 9 10 \u0026#34;\u0026#34;\u0026#34; 11 Example function 12 \u0026#34;\u0026#34;\u0026#34; 13 if (True,): 14 return num_strs[numberstring] 15 16from pprint import pprint 17 18if __name__ == \u0026#34;__main__\u0026#34;: 19 pprint(num_strs) 20 pprint(str_nums) 21 for x in range(3): 22 try: 23 r = TranslateNumberString(str_nums[x]) 24 print(\u0026#39;Str {} = {}\u0026#39;.format(str_nums[x], r)) 25 except: 26 print(\u0026#34;Damn!\u0026#34;) ruff check --output-format concise .\\example.py So I am linting this file and I\u0026rsquo;ve made the output concise (default is full), and passed i the --isolated flag so Ruff will ignore my config files and use the defaults instead (see Configuration). I did say this was contrived).\nEven from those few lines of rushed code I\u0026rsquo;ve got 8 syntax errors.\nThe full format explains in more detail each fault found, for example:\nruff check .\\example.py\n# Both lines are equivalent ruff check example.py ruff check --output-format full example.py The linter cannot always fix detected issues, for the rules the linter can fix see the legend in the Ruff Rules Documentation.\nIn this example there are 4 errors fixable automatically (those with [*]). Lets fix the easy ones automatically as they are simple errors:\nruff check --diff example.py # Show what the changes \u0026#39;would\u0026#39; be ruff check --fix example.py # Apply the changes You may get fixes that Ruff has classed as being unsafe, indicating that the meaning of your code may change with those fixes. There are none in the example, but the commands to fix the unsafe-fixes are similar:\nruff check --unsafe-fixes --diff example.py # Show what the changes \u0026#39;would\u0026#39; be ruff check --unsafe-fixes --fix example.py # Apply the changes Now we are down to 4 errors for our example, but there are no auto fixes for those. Lets go read the docs for each errored rule and fix them manually:\nF403 from sys import * used; unable to detect undefined names Yes, star imports are bad, change to import sys F634 If test is a tuple, which is always True Change to if True: E402 Module level import not at top of file Move import to the top E722 Do not use bare except Change to except Exception as e: Sometimes when you fix an issue, you will get another, in this case I got another F401 'sys' imported but unused error, which I also fixed. You always need to run the linter again until all the errors have been resolved.\nA mentioned, errors state what the problem is and give a rule number (e.g., F403) that you can look up on the Ruff Rules pages to get more information and suggestions on how to fix.\nNote: When used within an IDE, hyperlinks are provided to quickly get information on the error.\nNow we have all checks passing:\nruff format .\\example.py Before we format the remaining code, lets take a look at what would be changed:\nruff format --diff .\\example.py # Show what the changes \u0026#39;would\u0026#39; be Again I am using the --isolated option to use the default rules only.\nLets accept those changes and let Ruff format the code:\nruff format .\\example.py # Apply the formatting changes The final code is now:\nfrom pprint import pprint num_strs = {\u0026#34;Zero\u0026#34;: 0, \u0026#34;One\u0026#34;: 1, \u0026#34;Two\u0026#34;: 2, \u0026#34;Three\u0026#34;: 3} str_nums = {0: \u0026#34;Zero\u0026#34;, 1: \u0026#34;One\u0026#34;, 2: \u0026#34;Two\u0026#34;, 3: \u0026#34;Three\u0026#34;} def TranslateNumberString(numberstring): \u0026#34;\u0026#34;\u0026#34; Example function \u0026#34;\u0026#34;\u0026#34; if True: return num_strs[numberstring] if __name__ == \u0026#34;__main__\u0026#34;: pprint(num_strs) pprint(str_nums) for x in range(3): try: r = TranslateNumberString(str_nums[x]) print(\u0026#34;Str {} = {}\u0026#34;.format(str_nums[x], r)) except Exception as e: print(f\u0026#34;How exceptional! {e}\u0026#34;) Although the code runs and does what was intended, there are still issues with this code. Linters and formatters are only there to help you, not replace you!\nConfiguration The rules used by Ruff are derived from multiple linters and formatters, and are configurable through hierarchical TOML files.\nWhether Ruff is used as a linter, a formatter or both, configuration follows the same methodology. Ruff will search for a configuration file in one of the following files .ruff.toml, ruff.toml or pyproject.toml in the closest directory and in that order of preference. Alternatively you can specify any TOML file with the --config option.\nIt is normal to include Ruff configuration in your project pyproject.toml file, as the Ruff configuration can be included in the projects version control.\nThe majority of projects using Ruff, as listed by Astral, use their existing pyproject.toml to store their Ruff configuration. For example:\nFastApi using pyproject.toml\nPandas using pyproject.toml\nPolars using pyproject.toml\nAs an aside, SCiPy has renamed their Ruff config file lint.toml and explicitly referenced it in calling Ruff with the --config option.\nSciPy lint.toml\nSciPy calling Ruff with the --config option\nThere is no reason to not have a separate ruff.toml in your project directory.\nThat\u0026rsquo;s all well and good, but what if we don\u0026rsquo;t have a project, but still want to check certain files on the command line. We have 4 options:\nAdd a pyproject.toml to the directory Add a ruff.toml to the directory Use the --config option and point to an existing ruff.toml located elsewhere Have a default global ruff.toml that will be used if no other configuration file is located. For me, #4 is the preferred option for the way I work (although I am trying to use pyproject.toml more often, even for sandbox directories). I now have a default ruff.toml in my Windows home directory and a symbolic link to the Ruff directory:\n# Needs to be run as *PowerShell Admin (only Admin can create links) # Use \u0026#39;-Force\u0026#39; in case \u0026#39;\\AppData\\Roaming\\Ruff\u0026#39; dir has not been created New-Item -ItemType SymbolicLink -Force -Path \u0026#34;$env:USERPROFILE\\AppData\\Roaming\\Ruff\\ruff.toml\u0026#34; -Target \u0026#34;$env:USERPROFILE\\ruff.toml\u0026#34; IMHO, Ruff is a little lacking in not allowing a home directory default/fallback configuration file. Instead it has its file discovery, one of which is the ${config_dir}/ruff/ directory. For Windows, the $(config_dir) is equivalent to %userprofile%\\AppData\\Roaming and if there is a pyproject.toml or ruff.toml located in the assocuated Ruff directory, that TOML will be used if no local config file is found.\nRules Ruff rules are based around codes, [Letter Prefix][Number Code], e.g., F841.\nThe letter prefix indicate groups that are the source of the rule. This becomes more obvious when you look at the online Rules Documentation.\nAdditionally there are Settings which work alongside rules and define some rule parameters. For example, E501 is \u0026ldquo;line too long\u0026rdquo; which has a default of 88, but the Setting line-length allows you to define the length after-which this rule will be triggered, e.g.,:\n# pyproject.toml [tool.ruff] line-length = 120 # Allow lines to be as long as 120. The best way to start with your Ruff config is to add all rules, or the default set of group rules, and remove rules as they annoy you:\n# pyproject.toml [tool.ruff.lint] select = [\u0026#34;ALL\u0026#34;] # pyproject.toml [tool.ruff.lint] # RUFF DEFAULTS select = [ \u0026#34;F\u0026#34;, # pyflakes – detects syntax errors and basic mistakes \u0026#34;E4\u0026#34;, # pycodestyle errors (part of E group) \u0026#34;E7\u0026#34;, # pycodestyle E7xx errors (naming, etc.) \u0026#34;E9\u0026#34;, # pycodestyle E9xx errors (syntax) ] I\u0026rsquo;ve opted to add all rules and remove them as they annoy me. Defining \u0026quot;ALL\u0026quot; will at least mean that if any new rules are implemented, I will not miss the chance for those rules to annoy me.\n# ruff.toml # Settings line-length = 120 # Keep aligned with .editorconfig [format] line-ending = \u0026#34;lf\u0026#34; # Use `\\n` line endings [lint] select = [\u0026#34;ALL\u0026#34;] ignore = [ \u0026#34;ANN\u0026#34;, # flake8-annotations - MyPy is checking annotations \u0026#34;S311\u0026#34;, # flake8-bandit - cryptographically weak `random` used \u0026#34;RET504\u0026#34;, # flake8-return - unnecessary assignment before `return` statement \u0026#34;D200\u0026#34;, # pydocstyle - unnecessary multiline docstring \u0026#34;D203\u0026#34;, # pydocstyle - blank line before class docstring \u0026#34;D212\u0026#34;, # pydocstyle - docstring not on 1st line after opening quotes \u0026#34;D400\u0026#34;, # pydocstyle - missing trailing period in docstring \u0026#34;D401\u0026#34;, # pydocstyle - docstring first lines are not in an imperative mood \u0026#34;D415\u0026#34;, # pydocstyle - missing terminal punctuation (.,? or !) # \u0026#34;PERF401\u0026#34; # Perflint - `for` loop can be replaced by list comprehension # Consider removing these for projects/publication \u0026#34;D1\u0026#34;, # pydocstyle - missing docstring \u0026#34;ERA001\u0026#34;, # eradicate - found commented out code \u0026#34;T201\u0026#34;, # flake8-print - `print` found \u0026#34;T203\u0026#34;, # flake8-print - `pprint` found ] [lint.per-file-ignores] \u0026#34;tests/*.py\u0026#34; = [\u0026#34;S101\u0026#34;] # Use of `assert` detected \u0026#34;test_*.py\u0026#34; = [\u0026#34;S101\u0026#34;] # At the moment this gets me through most of my scripts and is small enough to transfer to a pyproject.toml if needed.\nThere are plenty of example GitHub projects using Ruff to show examples of configuration.\nIntegrating Ruff into your workflow CLI See Basic CLI Usage.\nIDE As usual, Astral have done a great job with the Editors Setup Documentation.\nI use VSCode and its pretty simple:\nInstall and enable the Ruff Extension from the Visual Studio Marketplace.\nConfigure Ruff to be the default and take action on save:\n// Editor: Python Specific Settings \u0026#34;[python]\u0026#34;: { \u0026#34;editor.defaultFormatter\u0026#34;: \u0026#34;charliermarsh.ruff\u0026#34;, \u0026#34;editor.formatOnSave\u0026#34;: true, \u0026#34;editor.codeActionsOnSave\u0026#34;: { // \u0026#34;source.fixAll\u0026#34;: \u0026#34;explicit\u0026#34;, \u0026#34;source.organizeImports\u0026#34;: \u0026#34;explicit\u0026#34;, }, }, You can include and exclude rules in the settings.json, but they are better placed in a project TOML file.\nOnce installed in VSCode, Ruff will automatically execute when you open or edit a Python file.\nYou can click the rule in the Problem panel and get sent to a webpage explaining that rule. You can right click the issue and select auto-fix, ignore, etc. All good stuff.\nPre-Commit If you have pre-commit setup for your project, you can add the ruff-pre-commit to it as well\n# .pre-commit-config.yaml repos: - repo: https://github.com/astral-sh/ruff-pre-commit # Ruff version. rev: v0.12.10 hooks: # Run the linter. - id: ruff-check # args: [ --fix ] # Run the formatter. - id: ruff-format GitHub Action If you have GitHub Actions setup for your project, you can add a ruff-action to it as well. Either as a file:\n# ruff.yml name: Ruff on: [ push, pull_request ] jobs: ruff: runs-on: ubuntu-latest steps: - uses: actions/checkout@v4 - uses: astral-sh/ruff-action@v3 \u0026hellip;or adding the following to your CI/CD workflow:\n- uses: astral-sh/ruff-action@v3 Tips What config file is it using now?\nCLI: add --verbose and it will one of the first things printed\nVSCode: Add the following to your workspace settings:\n\u0026#34;ruff.logLevel\u0026#34;: \u0026#34;debug\u0026#34;, \u0026#34;ruff.logFile\u0026#34;: \u0026#34;c:/temp/ruff.log\u0026#34;, The log will show which TOML is being used (there may be more than one referenced in the log) How do I get Ruff to ignore this line only?\nSometimes not everything is fixable, or needs to be fixed Add # noqa: \u0026lt;rule\u0026gt; to the line, e.g., # noqa: D201, and it will get ignored I like Black, can I use it as well as Ruff?\nCLI: No problem. They are different sections of the pyproject.toml file\nImportant: Make sure the line-length setting is the same for both or they will forever fight each other Run ruff check example.py and black example.py as you normally would on the CLI VSCode: You can set Black to be the Formatter and Ruff to be the Linter in the settings.json file\n# settings.json \u0026#34;ruff.lint.enable\u0026#34;: true, ... ... \u0026#34;python.formatting.provider\u0026#34;: \u0026#34;black\u0026#34;, ... ... Conclusion Improving your code should be as painless as possible. The coverage and speed of Ruff helps greatly, but I think the biggest benefit I have seen is that I am learning from it.\nThe speed helps with the feedback-loop.\nThe use of TOML files is simple and easy to add/remove rules to.\nDon\u0026rsquo;t get bogged down with it, instead embrace it as you move forward.\nFurther Reading Ruff Documentation Other Python code analysis tools that can give early warnings about certain aspects of your code, such as a complexity metric: Radon complexipy A study testing how effective Cognitive Complexity is ","permalink":"https://jbeattie5768.github.io/posts/2025-07-18-using-ruff-to-improve-python-development/","summary":"\u003cp\u003e\u003ca href=\"https://github.com/astral-sh/ruff\"\u003e\u003cimg alt=\"Ruff\" loading=\"lazy\" src=\"https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/astral-sh/ruff/main/assets/badge/v2.json\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#what-are-linters-and-formatters\"\u003eWhat are Linters and Formatters\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#linters\"\u003eLinters\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#formatters\"\u003eFormatters\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#why-you-should-use-them\"\u003eWhy You Should Use Them\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#what-is-ruff\"\u003eWhat is Ruff?\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#getting-started-with-ruff\"\u003eGetting Started with Ruff\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#installation-steps\"\u003eInstallation steps\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#basic-cli-usage\"\u003eBasic CLI Usage\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#ruff-check---output-format-concise-examplepy\"\u003e\u003ccode\u003eruff check --output-format concise .\\example.py\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#ruff-format-examplepy\"\u003e\u003ccode\u003eruff format .\\example.py\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#configuration\"\u003eConfiguration\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#rules\"\u003eRules\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#integrating-ruff-into-your-workflow\"\u003eIntegrating Ruff into your workflow\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#cli\"\u003eCLI\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#ide\"\u003eIDE\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#pre-commit\"\u003ePre-Commit\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#github-action\"\u003eGitHub Action\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#tips\"\u003eTips\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#conclusion\"\u003eConclusion\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#further-reading\"\u003eFurther Reading\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003ePython development is evolving—today, code quality and consistency are more important than ever. \u003cstrong\u003eStrict\u003c/strong\u003e is the new \u003cem\u003ecool\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003eTools like \u003ca href=\"https://github.com/psf/black\"\u003eBlack\u003c/a\u003e have made opinionated formatting mainstream, and the need for readable, maintainable, and error-free code is greater than ever—especially as projects grow and AI-driven code/tools become more prevalent.\u003c/p\u003e","title":"Modernizing Python Development: Linting and Formatting with Ruff"},{"content":"This is a test post to my Github Pages.\nExample Image should be here: ","permalink":"https://jbeattie5768.github.io/posts/2025-07-12-test-post/","summary":"\u003cp\u003eThis is a test post to my Github Pages.\u003c/p\u003e\n\u003cp\u003eExample Image should be here:\n\u003cimg alt=\"Image Alternative Text\" loading=\"lazy\" src=\"/posts/2025-07-12-test-post/pexels-caroline-mourer-517639631-32507137.jpg\"\u003e\u003c/p\u003e","title":"Test Post"},{"content":"I sometimes update the blog.\nContact: jbeattie5768@gmail.com\nWebsite info: Hosted on Github Pages Framework is Hugo Theme is PaperMod\n","permalink":"https://jbeattie5768.github.io/about/","summary":"\u003cp\u003eI sometimes update the blog.\u003c/p\u003e\n\u003cp\u003eContact: \u003ca href=\"mailto:jbeattie5768@gmail.com\"\u003ejbeattie5768@gmail.com\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eWebsite info: \u003cbr\u003e\n Hosted on \u003ca href=\"https://pages.github.com/\"\u003eGithub Pages\u003c/a\u003e \u003cbr\u003e\n Framework is \u003ca href=\"https://gohugo.io/\"\u003eHugo\u003c/a\u003e \u003cbr\u003e\n Theme is \u003ca href=\"https://github.com/adityatelange/hugo-PaperMod/\"\u003ePaperMod\u003c/a\u003e\u003c/p\u003e","title":"About"}]